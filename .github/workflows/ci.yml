name: CI
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build_android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.4
        with:
          node-version: 20.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: NPM Install
        run: npm install

      - name: Run unit tests
        run: npm run test

      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: android-coverage
          path: coverage

      - name: Setup Java JDK
        uses: actions/setup-java@v4.4.0
        with:
          java-version: 22
          distribution: adopt
          cache: gradle
          cache-dependency-path: android/build.gradle

      - name: Build APK
        working-directory: android
        run: ./gradlew assembleRelease

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: android/app/build/outputs/apk/release/app-release.apk

  build_ios:
    runs-on: macos-latest
    steps:
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISION_PROFILES_BASE64: ${{ secrets.PROVISION_PROFILES_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_ARCHIVE=$RUNNER_TEMP/mobile_pp.tgz
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$PROVISION_PROFILES_BASE64" | base64 --decode -o $PP_ARCHIVE

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # extract and copy provisioning profile(s)
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          tar xzvf $PP_ARCHIVE -C $RUNNER_TEMP
          for PROVISION in `ls $RUNNER_TEMP/*.mobileprovision`
          do
            UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i $PROVISION)`
            cp $PROVISION ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          done

          # echo some output
          security find-identity -v -p codesigning
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Checkout code
        uses: actions/checkout@v4.2.0

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.4
        with:
          node-version: 20.x
          cache: npm
          cache-dependency-path: package-lock.json

      - uses: actions/cache@v3
        name: Cache CocoaPods
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: NPM Install
        run: npm install

      - name: Install CocoaPods dependencies
        working-directory: ios
        run: pod install

      - name: Run unit tests
        run: npm run test

      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: ios-coverage
          path: coverage

      - name: Build archive
        working-directory: ios
        run: |
          xcodebuild -workspace casha.xcworkspace \
          -scheme "casha" \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/casha.xcarchive \
          archive

      - name: Export IPA
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/casha.xcarchive \
          -exportOptionsPlist $EXPORT_OPTS_PATH \
          -exportPath $RUNNER_TEMP/build

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ipa
          path: ${{ runner.temp }}/build/casha.ipa
